version: '3.8'

services:
  # Main OpenAgent API server
  openagent-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: openagent-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - AUTH_ENABLED=true
      - RATE_LIMIT_ENABLED=true
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-here}
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./openagent.db}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.openagent.service=api"
      - "com.openagent.environment=production"

  # Development server with hot reload
  openagent-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: openagent-dev
    ports:
      - "8001:8000"
    environment:
      - PYTHONPATH=/app
      - AUTH_ENABLED=false
      - RATE_LIMIT_ENABLED=false
      - DEVELOPMENT=true
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    command: >
      sh -c "
        pip install -e . &&
        python -m openagent.server.app --host 0.0.0.0 --reload
      "
    profiles:
      - dev
    labels:
      - "com.openagent.service=api"
      - "com.openagent.environment=development"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: openagent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    labels:
      - "com.openagent.service=cache"

  # PostgreSQL database for production
  postgres:
    image: postgres:15-alpine
    container_name: openagent-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-openagent}
      - POSTGRES_USER=${POSTGRES_USER:-openagent}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-openagent123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    profiles:
      - production
    labels:
      - "com.openagent.service=database"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: openagent-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - openagent-api
    restart: unless-stopped
    profiles:
      - production
    labels:
      - "com.openagent.service=proxy"

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: openagent-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring
    labels:
      - "com.openagent.service=monitoring"

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: openagent-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    labels:
      - "com.openagent.service=visualization"

  # Log aggregation with ELK Stack (optional)
  elasticsearch:
    image: elasticsearch:8.8.1
    container_name: openagent-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    profiles:
      - logging
    labels:
      - "com.openagent.service=search"

  logstash:
    image: logstash:8.8.1
    container_name: openagent-logstash
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    profiles:
      - logging
    labels:
      - "com.openagent.service=log-processing"

  kibana:
    image: kibana:8.8.1
    container_name: openagent-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    profiles:
      - logging
    labels:
      - "com.openagent.service=log-visualization"

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  default:
    name: openagent-network
    driver: bridge
