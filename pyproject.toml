[build-system]
requires = ["hatchling>=1.25"]
build-backend = "hatchling.build"

[project]
name = "openagent"
version = "0.1.1"
description = "A modern, extensible AI agent framework for building intelligent applications"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = ["ai", "agent", "llm", "assistant", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.0.0",
    "requests>=2.28.0",
    "aiohttp>=3.8.0",
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "pyyaml>=6.0.0",
    "jinja2>=3.1.0",
    "httpx>=0.24.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "huggingface-hub>=0.16.0",
    "tokenizers>=0.13.0",
    "datasets>=2.10.0",
    "accelerate>=0.20.0",
    "protobuf>=3.20.0",
    "numpy>=1.24.0",
    "psutil>=5.9.0",
    "websockets>=11.0.0",
    # Server components for daemon and API
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "python-multipart>=0.0.6",
    # Gemini client so cloud model works out of the box
    "google-generativeai>=0.7.0",
]

[project.optional-dependencies]
sentencepiece = [
    "sentencepiece>=0.1.99",
]
server = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "python-multipart>=0.0.6",
]
db = [
    "sqlalchemy>=2.0.0",
    "alembic>=1.10.0",
    "redis>=4.5.0",
    "celery>=5.3.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]
openai = [
    "openai>=1.0.0",
]
anthropic = [
    "anthropic>=0.20.0",
]
gemini = [
    "google-generativeai>=0.7.0",
]
all = [
    "openagent[dev,docs,openai,anthropic,gemini]",
]

[project.urls]
Homepage = "https://github.com/yourusername/OpenAgent"
Documentation = "https://yourusername.github.io/OpenAgent"
Repository = "https://github.com/yourusername/OpenAgent"
"Bug Tracker" = "https://github.com/yourusername/OpenAgent/issues"
Changelog = "https://github.com/yourusername/OpenAgent/blob/main/CHANGELOG.md"

[project.scripts]
openagent = "openagent.cli:main"

[tool.hatch.build]
include = [
  "openagent/**",
  "README.md",
  "LICENSE*",
]
exclude = [
  "tests/**",
  "docs/**",
  "examples/**",
  "build/**",
  "dist/**",
  "venv/**",
  ".venv/**",
]

[tool.hatch.build.targets.wheel]
packages = ["openagent"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "venv",
    ".venv",
    ".eggs",
    "*.egg",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--cov=openagent",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["openagent"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]
