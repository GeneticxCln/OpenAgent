name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

env:
  PYTHON_VERSION: "3.11"
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1

jobs:
  # 🔍 Code Quality
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: 🔍 Lint & Format Check
      run: |
        echo "::group::🔍 Flake8"
        flake8 openagent tests --count --statistics
        echo "::endgroup::"
        
        echo "::group::⚫ Black"
        black --check --diff openagent tests
        echo "::endgroup::"
        
        echo "::group::📄 isort"
        isort --check-only --diff openagent tests
        echo "::endgroup::"
        
    - name: 📏 Type Check
      continue-on-error: true
      run: |
        mypy openagent --ignore-missing-imports
        
    - name: 🛡️ Security Check
      continue-on-error: true
      run: |
        bandit -r openagent -f json -o bandit-report.json
        
    - name: 📋 Upload Security Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json
        retention-days: 7

  # 🧪 Test Matrix
  test:
    name: 🧪 Test (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.9'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: 🧪 Run tests
      run: |
        pytest tests/ -v --cov=openagent --cov-report=xml --maxfail=5
        
    - name: 📊 Upload coverage
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # 🔧 Security Tests
  security:
    name: 🔧 Security & Strict Mode
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: 🔒 Strict mode tests
      env:
        OPENAGENT_EXEC_STRICT: '1'
        OPENAGENT_BLOCK_RISKY: '1'
      run: |
        pytest tests/ -v -m "not slow" --maxfail=3

  # 📚 Documentation
  docs:
    name: 📚 Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
        
    - name: 🏗️ Build docs
      run: |
        mkdocs build --clean
        
    - name: 🚀 Deploy docs
      if: github.event_name == 'push'
      run: |
        mkdocs gh-deploy --force

  # 🔨 Build
  build:
    name: 🔨 Build Package
    runs-on: ubuntu-latest
    needs: [test, security]
    if: always() && needs.test.result == 'success' && needs.security.result == 'success'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install build tools
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: 🔨 Build package
      run: |
        python -m build
        twine check dist/*
        
    - name: 📋 Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        retention-days: 30

  # 🚀 Release
  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    
    steps:
    - name: 📥 Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/
        
    - name: 🚀 Deploy to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: dist/
